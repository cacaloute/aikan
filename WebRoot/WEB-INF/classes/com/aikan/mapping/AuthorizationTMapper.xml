<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	为这个mapper指定一个唯一的namespace，
	namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
	例如namespace="com.my.mapping.EmpMapper"就是com.my.mapping (包名)+EmpMapper (EmpMapper.xml文件去除后缀)
-->

<mapper namespace="com.aikan.mapping.AuthorizationTMapper">
	<!-- 
		在select标签中编写查询的SQL语句， 设置select标签的id属性为select，id属性值必须是唯一的，不能够重复
 		使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
		resultType="com.my.entity.Emp"就表示将查询结果封装成一个User类的对象返回
		User类就是users表所对应的实体类
	-->
	
	<select id="selectAll" resultType="AuthorizationT">
		select a.aid,a.aname,a.aurl,a.atype,a.aparentid
		from AuthorizationT a
		order by a.aid
  	</select>
  	
  	<select id="selectByParentId" parameterType="int" resultType="AuthorizationT">
		select a.aid,a.aname,a.aurl,a.atype,a.aparentid
		from AuthorizationT a
		where a.aparentid=#{parentId}
		order by a.aid
  	</select>
  	
  	<select id="selectByParentIdAndRoleId" parameterType="map" resultType="AuthorizationT">
		select al.aid,al.aname,al.aurl,al.atype,al.aparentid,ar.hasaid hasAuthorId
		from authorizationT al left join (
               		select a.aid hasaid
                	from authorizationT a left join roleAuthorization ra
                     		on a.aid=ra.auid
                	where ra.roleId=#{roleId}
                	order by ra.roleId,a.aid
          		) ar
      		on al.aid=ar.hasaid
		where al.aparentid=#{parentId}
		order by al.aid
  	</select>
	  	
</mapper>